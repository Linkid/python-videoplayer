name: Build

on: [push, pull_request]
on:
  push:
    tags:
       'v*.*.*' # when tag with name 'vX.Y.Z' is pushed to master
  release: # or when a new Release is created&published in GH web interface
    types: [published]

jobs:
  build_wheels:
    name: Build wheels with cibuildwheel on ${{ matrix.runs-on }} / ${{ matrix.cibw-arch }} (${{ matrix.cibw-manylinux }})
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        #os: [ubuntu-18.04, windows-latest, macos-latest]
        include:
          #- runs-on: ubuntu-latest
          #  cibw-arch: cp27-manylinux_x86_64
          #  cibw-manylinux: manylinux1

          #- runs-on: ubuntu-latest
          #  cibw-arch: cp27-manylinux_x86_64
          #  cibw-manylinux: manylinux2010

          #- runs-on: macos-latest
          #  cibw-arch: cp27-macosx_x86_64

          - runs-on: windows-latest

    steps:
      #- name: Cache build
      #  uses: actions/cache@v2
      #  with:
      #    path: build
      #    key: {{ matrix.runs-on }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==1.7.0

      #
      # windows
      #
      - name: Install Visual C++ for Python 2.7
        if: runner.os == 'Windows'
        run: |
          choco install vcpython27 -f -y

#      - uses: ilammy/msvc-dev-cmd@v1
#        #if: runner.os == 'Windows'
#        if: always()
#        with:
#          arch: x64
#
#      - name: Install os dependencies
#        uses: lukka/run-vcpkg@v4
#        if: runner.os == 'Windows'
#        with:
#          # vcpkgArguments: '@${{ github.workspace }}/${{ matrix.vcpkg-response-file }}'
#          vcpkgArguments: glib libogg libtheora ffmpeg msinttypes
#          vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
#          vcpkgGitCommitId: e9ff3cd5a04cd0e8122ff56e9873985ff71aa3ca  # 2020-11-01
#          #vcpkgTriplet: 
#        env:
#          VCPKG_DEFAULT_TRIPLET: "x64-windows"
#
#      - name: Build 64-bit wheel
#        if: always()
#        #if: runner.os == 'Windows'
#        run: python -m cibuildwheel --output-dir wheelhouse
#        env:
#          CIBW_BUILD: cp27-win_amd64
#          CIBW_BEFORE_BUILD: "bash {package}/.github/workflows/before_build.sh ${{ matrix.runs-on }}"
#          CIBW_BUILD_VERBOSITY: 3
#          DISTUTILS_USE_SDK: 1
#          MSSdk: 1
#          VCPKG_BUILD: 1
#          VCPKG_TOOLCHAIN: "C:/vcpkg/scripts/buildsystems/vcpkg.cmake"

      - uses: ilammy/msvc-dev-cmd@v1
        #if: runner.os == 'Windows'
        if: always()
        with:
          arch: x86

      - name: Install os dependencies
        uses: lukka/run-vcpkg@v4
        if: runner.os == 'Windows'
        with:
          # vcpkgArguments: '@${{ github.workspace }}/${{ matrix.vcpkg-response-file }}'
          vcpkgArguments: glib libogg libtheora ffmpeg msinttypes
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
          vcpkgGitCommitId: e9ff3cd5a04cd0e8122ff56e9873985ff71aa3ca  # 2020-11-01
          #vcpkgTriplet: 
        env:
          VCPKG_DEFAULT_TRIPLET: "x86-windows"

      - name: Build 32-bit wheel
        #if: runner.os == 'Windows'
        if: always()
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BEFORE_BUILD: "bash {package}/.github/workflows/before_build.sh ${{ matrix.runs-on }}"
          CIBW_BUILD: "cp27-win32"
          CIBW_TEST_COMMAND: "pytest {package}/tests"
          CIBW_BEFORE_TEST: "ls {package}/videoplayer"
          CIBW_TEST_REQUIRE: "pytest"
          DISTUTILS_USE_SDK: 1
          MSSdk: 1
          VCPKG_BUILD: 1
          VCPKG_TOOLCHAIN: "C:/vcpkg/scripts/buildsystems/vcpkg.cmake"
      #
      #
      #

      - name: Build wheels
        if: runner.os != 'Windows'
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BEFORE_BUILD: "bash {package}/.github/workflows/before_build.sh ${{ matrix.runs-on }}"
          CIBW_BUILD: "${{ matrix.cibw-arch }}"
          CIBW_MANYLINUX_X86_64_IMAGE: "${{ matrix.cibw-manylinux }}"
          CIBW_MANYLINUX_I686_IMAGE: "${{ matrix.cibw-manylinux }}"
          CIBW_TEST_COMMAND: "pytest {package}/tests"
          CIBW_BEFORE_TEST: "ls {package}/videoplayer"
          CIBW_TEST_REQUIRE: "pytest"

      #- name: Upload wheels
      #  uses: actions/upload-artifact@v2
      #  with:
      #    path: ./wheelhouse/*.whl
